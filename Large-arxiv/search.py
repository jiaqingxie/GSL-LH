import os

if __name__=="__main__":
    device=6
    seed=44

    lr=0.01
    # ptb_rate=0.05
    # print(f"ptb_rate:{ptb_rate}")
    # lis=[x*y for x in range(1,10,2) for y in [0.00001,0.0001,0.001,0.01,0.1]]
    # print(lis)
    # for lr in [0.01]:
    #     for lr_adj in [1,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1,0.09,0.08,0.07,0.06,0.05,0.04,0.03,0.02,0.01,0.001,0.0001,0.00001]:
    #         for seed in range(1,11):
    #             os.system(f"python gnn.py --attack --select_attack --ptb_rate {ptb_rate} --device {device} --gcn_masked --lr {lr} --lr_adj {lr_adj} --seed {seed}")
    ablation_params=[
    # [0.05,-1,-1,0.01,0.0001],
    # [0.05,-1,0.2,0.1,0.001],
    # [0.05,-1,0.4,0.01,0.001],
    # [0.05,-1,0.6,0.01,0.01],
    # [0.05,-1,0.8,0.1,0.001],
    # [0.05,0.2,-1,0.1,1e-5],
    # [0.05,0.2,0.2,0.001,0.0001],
    # [0.05,0.2,0.4,0.01,0.001],
    # [0.05,0.2,0.6,0.1,0.1],
    # [0.05,0.2,0.8,0.1,0.0001],
    # [0.05,0.4,-1,0.0001,0.001],
    # [0.05,0.4,0.2,0.01,0.1],
    # [0.05,0.4,0.4,0.001,0.1],
    # [0.05,0.4,0.6,0.0001,0.001],
    # [0.05,0.4,0.8,0.1,0.01],
    # [0.05,0.6,-1,1e-5,1e-4],
    # [0.05,0.6,0.2,1e-5,1e-4],
    # [0.05,0.6,0.4,1e-5,0.1],
    # [0.05,0.6,0.6,0.001,0.01],
    # [0.05,0.6,0.8,0.001,0.001],
    # [0.05,0.8,-1,0.001,0.1],
    # [0.05,0.8,0.2,1e-5,0.1],
    # [0.05,0.8,0.4,1e-4,0.01],
    # [0.05,0.8,0.6,1e-4,0.1],
    # [0.05,0.8,0.8,1e-5,1e-5],


    # [0.25,-1,-1,0.1,0.001],
    # [0.25,-1,0.2,0.01,1e-5],
    # [0.25,-1,0.4,1e-5,1e-4],
    # [0.25,-1,0.6,0.01,0.0001],
    # [0.25,-1,0.8,0.001,0.1],
    # [0.25,0.2,-1,1e-5,0.1],
    # [0.25,0.2,0.2,1e-5,1e-3],
    # [0.25,0.2,0.4,0.001,0.1],
    # [0.25,0.2,0.6,1e-4,0.001],
    # [0.25,0.2,0.8,0.001,0.1],
    # [0.25,0.4,-1,1e-5,0.1],
    # [0.25,0.4,0.2,1e-5,0.001],
    # [0.25,0.4,0.4,1e-5,0.1],
    # [0.25,0.4,0.6,1e-5,0.01],
    # [0.25,0.4,0.8,1e-5,0.01],
    # [0.25,0.6,-1,1e-4,1e-4],
    # [0.25,0.6,0.2,1e-4,1e-3],
    # [0.25,0.6,0.4,1e-4,1e-3],
    # [0.25,0.6,0.6,0.01,0.1],
    # [0.25,0.6,0.8,1e-4,0.01],
    # [0.25,0.8,-1,1e-5,1e-5],
    # [0.25,0.8,0.2,1e-5,0.1],
    # [0.25,0.8,0.4,0.01,0.1],
    # [0.25,0.8,0.6,0.001,0.01],
    # [0.25,0.8,0.8,0.0001,0.01],

    # [0.1,-1,-1,0.1,0.01],
    # [0.1,-1,0.2,0.01,0.001],
    # [0.1,-1,0.4,1e-5,1e-4],
    # [0.1,-1,0.6,0.1,0.001],
    # [0.1,-1,0.8,1e-4,0.1],
    # [0.1,0.2,-1,0.1,1e-4],
    # [0.1,0.2,0.2,1e-4,1e-4],
    # [0.1,0.2,0.4,0.1,0.1],
    # [0.1,0.2,0.6,0.01,0.01],
    # [0.1,0.2,0.8,0.01,0.001],
    # [0.1,0.4,-1,1e-5,1e-4],
    # [0.1,0.4,0.2,0.01,0.1],
    # [0.1,0.4,0.4,1e-4,0.01],
    # [0.1,0.4,0.6,0.01,0.1],
    # [0.1,0.4,0.8,1e-4,0.1],
    # [0.1,0.6,-1,1e-5,1e-4],
    # [0.1,0.6,0.2,1e-5,0.1],
    # [0.1,0.6,0.4,1e-5,0.001],
    # [0.1,0.6,0.6,1e-5,0.001],
    # [0.1,0.6,0.8,0.0001,0.01],
    # [0.1,0.8,-1,0.0001,0.0001],
    # [0.1,0.8,0.2,0.0001,0.01],
    # [0.1,0.8,0.4,0.0001,0.001],
    # [0.1,0.8,0.6,0.0001,0.1],
    # [0.1,0.8,0.8,0.001,0.01],

    # [0.15,-1,-1,0.01,1e-5],
    # [0.15,-1,0.2,0.01,0.1],
    # [0.15,-1,0.4,0.1,0.001],
    # [0.15,-1,0.6,0.1,0.0001],
    # [0.15,-1,0.8,0.1,0.0001],
    # [0.15,0.2,-1,0.1,1e-5],
    # [0.15,0.2,0.2,0.1,0.001],
    # [0.15,0.2,0.4,0.1,0.1],
    # [0.15,0.2,0.6,0.1,0.1],
    # [0.15,0.2,0.8,0.001,0.1],
    # [0.15,0.4,-1,1e-5,1e-4],
    # [0.15,0.4,0.2,0.001,0.01],
    # [0.15,0.4,0.4,1e-5,0.1],
    # [0.15,0.4,0.6,1e-4,0.01],
    # [0.15,0.4,0.8,1e-4,0.1],
    # [0.15,0.6,-1,1e-4,0.1],
    # [0.15,0.6,0.2,0.01,0.1],
    # [0.15,0.6,0.4,0.0001,0.01],
    # [0.15,0.6,0.6,1e-5,0.01],
    # [0.15,0.6,0.8,1e-5,0.01],
    # [0.15,0.8,-1,1e-5,1e-4],
    # [0.15,0.8,0.2,0.0001,0.1],
    # [0.15,0.8,0.4,0.0001,0.1],
    # [0.15,0.8,0.6,1e-5,0.1],
    # [0.15,0.8,0.8,1e-5,0.001],


    [0.2,-1,-1,0.1,0.01],
    [0.2,-1,0.2,0.1,0.001],
    [0.2,-1,0.4,0.01,0.0001],
    [0.2,-1,0.6,0.1,0.001],
    [0.2,-1,0.8,0.1,0.01],
    [0.2,0.2,-1,0.001,0.01],
    [0.2,0.2,0.2,0.1,0.1],
    [0.2,0.2,0.4,0.001,1e-4],
    [0.2,0.2,0.6,0.001,1e-4],
    [0.2,0.2,0.8,0.1,0.1],
    [0.2,0.4,-1,1e-5,1e-4],
    [0.2,0.4,0.2,1e-4,0.01],
    [0.2,0.4,0.4,1e-4,0.1],
    [0.2,0.4,0.6,1e-5,0.1],
    [0.2,0.4,0.8,1e-5,0.01],
    [0.2,0.6,-1,1e-5,1e-5],
    [0.2,0.6,0.2,1e-4,1e-3],
    [0.2,0.6,0.4,0.001,0.01],
    [0.2,0.6,0.6,1e-5,0.01],
    [0.2,0.6,0.8,0.001,0.01],
    [0.2,0.8,-1,1e-5,0.001],
    [0.2,0.8,0.2,1e-5,0.1],
    [0.2,0.8,0.4,1e-5,0.1],
    [0.2,0.8,0.6,0.01,0.1],
    [0.2,0.8,0.8,0.001,0.001],

    ]
        # for lr_adj in [0.00001,0.0001,0.001,0.01,0.1]:
        #     for lr_weight in [0.00001,0.0001,0.001,0.01,0.1]:
        #         for adj_sparsity in [-1,0.2,0.4,0.6,0.8]:
        #             for weight_sparsity in [-1,0.2,0.4,0.6,0.8]:

    ptb_rate_sota_params=[ 
    # [0.05,-1,0.2,0.1,0.001],
    [0.1,0.8,0.2,1e-4,0.01],
    # [0.15,0.8,-1,1e-5,1e-4],
    [0.2,0.8,-1,1e-5,0.001],
    # [0.25,0.8,-1,1e-5,1e-5],
    ]
    print("ptb_rate"," adj_sparsity"," weight_sparsity"," lr_adj"," lr_weight")
    for hyperparams in ptb_rate_sota_params:
        ptb_rate,adj_sparsity,weight_sparsity,lr_adj,lr_weight=hyperparams
        print(ptb_rate,adj_sparsity,weight_sparsity,lr_adj,lr_weight)
        os.system(f"python gnn.py --attack --select_attack --save_lottery_graph \
                            --ptb_rate {ptb_rate} --device {device} --gcn_masked \
                        --lr {lr} --lr_adj {lr_adj} --lr_weight {lr_weight} --seed {seed} \
                            --weight_sparsity {weight_sparsity} --adj_sparsity {adj_sparsity} --runs 5 --feature_sampling")

    # os.system(f"python gnn.py --attack --select_attack --save_lottery_graph \
    #                         --ptb_rate 0 --device 0 --gcn_masked \
    #                     --lr 0.01 --lr_adj 0.01 --lr_weight 0.01 --seed 42 \
    #                         --debug --weight_sparsity -1 --adj_sparsity -1")